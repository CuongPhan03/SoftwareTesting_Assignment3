# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAddNewCategory():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.driver.set_window_size(800, 800)
    self.driver.get('https://sandbox.moodledemo.net/login/index.php')    
    self.driver.find_element(By.ID, "username").send_keys('admin')
    self.driver.find_element(By.ID, "password").send_keys('sandbox24')
    self.driver.find_element(By.ID, "loginbtn").click()
  
  def teardown_method(self, method):
    self.driver.find_element(By.ID, "user-menu-toggle").click()
    self.driver.find_element(By.LINK_TEXT, "Log out").click()
    self.driver.quituit()
  
  def test_fullInfoCancel(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/course/management.php?categoryid=1")
      self.driver.set_window_size(919, 798)
      self.driver.find_element(By.LINK_TEXT, "Create new category").click()
      self.driver.find_element(By.ID, "id_name").click()
      self.driver.find_element(By.ID, "id_name").send_keys("new_02")
      self.driver.find_element(By.ID, "id_idnumber").click()
      self.driver.find_element(By.ID, "id_idnumber").send_keys("05")
      self.driver.switch_to.frame(0)
      self.driver.find_element(By.CSS_SELECTOR, "html").click()
      element = self.driver.find_element(By.ID, "tinymce")
      self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>aaaaaaaaa<br data-mce-bogus=\"1\"></p>'}", element)
      self.driver.switch_to.default_content()
      self.driver.find_element(By.ID, "id_cancel").click()
      element = self.driver.find_element(By.LINK_TEXT, "Category")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      text = self.driver.find_element(By.XPATH, "//*[@id=\"course-listing-title\"]").text
      assert text != "new_02"
      return True
    except Exception as e:
      return False
  
  def test_noInfoCancel(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/course/management.php?categoryid=1")
      self.driver.set_window_size(919, 798)
      self.driver.find_element(By.LINK_TEXT, "Create new category").click()
      self.driver.execute_script("window.scrollTo(0,334.6666564941406)")
      self.driver.find_element(By.ID, "id_cancel").click()
      text = self.driver.find_element(By.XPATH, "//*[@id=\"course-listing-title\"]").text
      assert text != "."
      return True
    except Exception as e:
      return False
    
  def test_notParentCancel(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/course/management.php?categoryid=1")
      self.driver.set_window_size(919, 798)
      self.driver.find_element(By.LINK_TEXT, "Create new category").click()
      self.driver.execute_script("window.scrollTo(0,189.3333282470703)")
      self.driver.find_element(By.ID, "id_name").click()
      self.driver.find_element(By.ID, "id_name").send_keys("new_09")
      self.driver.find_element(By.ID, "id_idnumber").click()
      self.driver.find_element(By.ID, "id_idnumber").send_keys("99")
      self.driver.switch_to.frame(0)
      self.driver.find_element(By.CSS_SELECTOR, "html").click()
      element = self.driver.find_element(By.ID, "tinymce")
      self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>123<br data-mce-bogus=\"1\"></p>'}", element)
      self.driver.switch_to.default_content()
      self.driver.find_element(By.CSS_SELECTOR, "#form_autocomplete_selection-1732274285212-0 > span").click()
      dropdown = self.driver.find_element(By.ID, "id_parent")
      dropdown.find_element(By.XPATH, "//option[. = 'label']").click()
      self.driver.find_element(By.ID, "id_cancel").click()
      text = self.driver.find_element(By.XPATH, "//*[@id=\"course-listing-title\"]").text
      assert text != "new_09"
      return True
    except Exception as e:
      return False
  
  def test_notParentName(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/course/management.php?categoryid=1")
      self.driver.set_window_size(919, 798)
      self.driver.find_element(By.LINK_TEXT, "Create new category").click()
      self.driver.find_element(By.CSS_SELECTOR, "#form_autocomplete_selection-1732272337748-0 > span").click()
      dropdown = self.driver.find_element(By.ID, "id_parent")
      dropdown.find_element(By.XPATH, "//option[. = 'label']").click()
      self.driver.find_element(By.ID, "id_name").click()
      self.driver.find_element(By.ID, "id_name").send_keys("hihi")
      self.driver.find_element(By.ID, "id_idnumber").click()
      self.driver.find_element(By.ID, "id_idnumber").send_keys("01")
      self.driver.switch_to.frame(0)
      self.driver.find_element(By.CSS_SELECTOR, "html").click()
      element = self.driver.find_element(By.ID, "tinymce")
      self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>qqqqqq<br data-mce-bogus=\"1\"></p>'}", element)
      self.driver.switch_to.default_content()
      self.driver.find_element(By.CSS_SELECTOR, "#fitem_id_description_editor > .col-md-3").click()
      self.driver.find_element(By.ID, "id_submitbutton").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"id_error_parent\"]").text == "- You must supply a value here."
      return True
    except Exception as e:
      return False
  
  def test_notParentNotName(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/course/management.php?categoryid=1")
      self.driver.set_window_size(919, 798)
      self.driver.find_element(By.LINK_TEXT, "Create new category").click()
      self.driver.find_element(By.CSS_SELECTOR, "#form_autocomplete_selection-1732272564593-0 > span").click()
      dropdown = self.driver.find_element(By.ID, "id_parent")
      dropdown.find_element(By.XPATH, "//option[. = 'label']").click()
      self.driver.find_element(By.ID, "mform1_YruF4hNSSNNUBLn").click()
      self.driver.find_element(By.ID, "id_idnumber").click()
      self.driver.find_element(By.ID, "id_idnumber").send_keys("023")
      self.driver.switch_to.frame(0)
      self.driver.find_element(By.CSS_SELECTOR, "html").click()
      element = self.driver.find_element(By.ID, "tinymce")
      self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>mmmmmmmm<br data-mce-bogus=\"1\"></p>'}", element)
      self.driver.switch_to.default_content()
      self.driver.find_element(By.ID, "id_submitbutton").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"id_error_parent\"]").text == "- You must supply a value here."
      return True
    except Exception as e:
      return False
  
  def test_parentAndName(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/course/management.php?categoryid=1")
      self.driver.set_window_size(550, 692)
      self.driver.find_element(By.LINK_TEXT, "Create new category").click()
      self.driver.find_element(By.ID, "id_name").click()
      self.driver.find_element(By.ID, "id_name").send_keys("cat_1")
      self.driver.find_element(By.ID, "id_idnumber").click()
      self.driver.find_element(By.ID, "id_idnumber").send_keys("11")
      self.driver.switch_to.frame(0)
      self.driver.find_element(By.CSS_SELECTOR, "p").click()
      element = self.driver.find_element(By.ID, "tinymce")
      self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>aaaaaa<br data-mce-bogus=\"1\"></p>'}", element)
      self.driver.switch_to.default_content()
      self.driver.find_element(By.ID, "mform1_S7W8pjMaqsJn424").click()
      self.driver.find_element(By.ID, "id_submitbutton").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"course-listing-title\"]").text == "cat_1"
      self.driver.find_element(By.CSS_SELECTOR, "#action-menu-toggle-2 > .icon").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".action-permissions:nth-child(5) > .menu-action-text")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element, 0, 0).perform()
      self.driver.find_element(By.LINK_TEXT, "Delete").click()
      self.driver.find_element(By.ID, "id_submitbutton").click()
      return True
    except Exception as e:
      return False
  
  def test_reParent(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/course/management.php?categoryid=1")
      self.driver.set_window_size(919, 798)
      self.driver.find_element(By.LINK_TEXT, "Create new category").click()
      self.driver.execute_script("window.scrollTo(0,122)")
      self.driver.find_element(By.CSS_SELECTOR, "#form_autocomplete_selection-1732274385705-0 > span").click()
      dropdown = self.driver.find_element(By.ID, "id_parent")
      dropdown.find_element(By.XPATH, "//option[. = 'label']").click()
      self.driver.find_element(By.ID, "id_name").click()
      self.driver.find_element(By.ID, "id_name").send_keys("new_10")
      self.driver.find_element(By.ID, "id_idnumber").click()
      self.driver.find_element(By.ID, "id_idnumber").send_keys("90")
      self.driver.switch_to.frame(0)
      self.driver.find_element(By.CSS_SELECTOR, "html").click()
      element = self.driver.find_element(By.ID, "tinymce")
      self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>mmmmmmmm<br data-mce-bogus=\"1\"></p>'}", element)
      self.driver.switch_to.default_content()
      self.driver.find_element(By.ID, "id_submitbutton").click()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732274385705").click()
      self.driver.find_element(By.CSS_SELECTOR, "#form_autocomplete_suggestions-1732274385705 > li:nth-child(2)").click()
      dropdown = self.driver.find_element(By.ID, "id_parent")
      dropdown.find_element(By.XPATH, "//option[. = 'Miscellaneous']").click()
      self.driver.find_element(By.ID, "id_submitbutton").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"course-listing-title\"]").text == "new_10"
      self.driver.find_element(By.CSS_SELECTOR, "#action-menu-toggle-2 > .icon").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".action-permissions:nth-child(5) > .menu-action-text")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element, 0, 0).perform()
      self.driver.find_element(By.LINK_TEXT, "Delete").click()
      self.driver.find_element(By.ID, "id_submitbutton").click()
      return True
    except Exception as e:
      return False
  
  
  def run(self):
    self.setup_method(None)

    test_list = [
      self.test_fullInfoCancel,
      self.test_noInfoCancel,
      self.test_notParentCancel,
      self.test_notParentName,
      self.test_notParentNotName,
      self.test_notParentName,
      self.test_parentAndName,
    ]

    results = [test() for test in test_list]

    fail_test_names = []
    for i in range(0, len(results)):
      if not results[i]:
        fail_test_names.append(test_list[i].__name__)

    fail_test_str = ("FAILED:\n\t" + "\n\t".join(name for name in fail_test_names) + "\n") if len(fail_test_names) > 0 else ""
    print(f"\n-- Test Find Course (Level 0) --\nPASSED: {results.count(True)}/{len(results)}\n{fail_test_str}")
    
    self.teardown_method(None)

TestAddNewCategory().run()