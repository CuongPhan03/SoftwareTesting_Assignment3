# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestEnrollUsers():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.driver.set_window_size(800, 800)
    self.driver.get('https://sandbox.moodledemo.net/login/index.php')    
    self.driver.find_element(By.ID, "username").send_keys('teacher')
    self.driver.find_element(By.ID, "password").send_keys('sandbox24')
    self.driver.find_element(By.ID, "loginbtn").click()
  
  def teardown_method(self, method):
    self.driver.find_element(By.ID, "user-menu-toggle").click()
    self.driver.find_element(By.LINK_TEXT, "Log out").click()
    self.driver.quit()
  
  def test_addMoreStudentCancel(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(686, 1020)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732263432172").click()
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) > span > span:nth-child(2)").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Max Manager manager@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Sam Student student@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732263431884_292").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "TT"
      return True
    except Exception as e:
      return False; 
  
  def test_addOneNotStudent(self):
    try: 
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732168231841").click()
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) > span > span:nth-child(2)").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Max Manager manager@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Sam Student student@moodle.a']").click()
      self.driver.set_window_size(1238, 1020)
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      self.driver.find_element(By.ID, "id_roletoassign").click()
      dropdown = self.driver.find_element(By.ID, "id_roletoassign")
      dropdown.find_element(By.XPATH, "//option[. = 'Non-editing teacher']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732168231499_269").click()
      self.driver.find_element(By.CSS_SELECTOR, ".align-items-md-stretch").click()
      element = self.driver.find_element(By.ID, "yui_3_18_1_1_1732168231499_289")
      actions = ActionChains(self.driver)
      actions.double_click(element).perform()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c3\"]/span/a").text == "Non-editing teacher"
      return True
    except Exception as e:
      return False
    
  def test_addOneStudent(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(1238, 1020)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732124883577").click()
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) > span > span:nth-child(2)").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Max Manager manager@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Sam Student student@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      self.driver.find_element(By.ID, "id_roletoassign").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732124883383_263").click()
      element = self.driver.find_element(By.ID, "yui_3_18_1_1_1732124883383_270")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.ID, "yui_3_18_1_1_1732124883383_270")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.ID, "yui_3_18_1_1_1732124883383_270")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732124883383_270").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732124883383_229").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "SS"
      return True
    except Exception as e:
      return False
    
  def test_addOneStudentCancel(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(696, 1020)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".btn-secondary:nth-child(1)")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732263230357").click()
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) small").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Max Manager manager@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Sam Student student@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732263230138_267").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "TT"
      return True
    except Exception as e:
      return False
    
  def test_addOneStudentWithMoreField(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732262058671").click()
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) span:nth-child(2)").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'admin 1 admin@gmail.com']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = '2 4 nghia.nannt@gmail.com']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Max Manager manager@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Sam Student student@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732262058436_279").click()
      self.driver.find_element(By.ID, "id_recovergrades").click()
      self.driver.find_element(By.ID, "id_startdate").click()
      dropdown = self.driver.find_element(By.ID, "id_startdate")
      dropdown.find_element(By.XPATH, "//option[. = 'Course start (8/10/24)']").click()
      self.driver.find_element(By.ID, "id_timeend_enabled").click()
      self.driver.find_element(By.ID, "id_timeend_month").click()
      dropdown = self.driver.find_element(By.ID, "id_timeend_month")
      dropdown.find_element(By.XPATH, "//option[. = 'February']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732262058436_402").click()
      self.driver.set_window_size(1178, 1025)
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-notifications\"]/div/button/span[2]").text == "Dismiss this notification"
      return True
    except Exception as e:
      return False
  
  def test_addSomeNotStudent(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(1328, 1020)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732247948016").click()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732247948016").click()
      element = self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732247948016")
      actions = ActionChains(self.driver)
      actions.double_click(element).perform()
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) small").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Max Manager manager@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Sam Student student@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      self.driver.find_element(By.ID, "id_roletoassign").click()
      dropdown = self.driver.find_element(By.ID, "id_roletoassign")
      dropdown.find_element(By.XPATH, "//option[. = 'Non-editing teacher']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732247947613_319").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "SS"
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r2_c1\"]/a/span").text == "AU"
      return True
    except Exception as e:
      return False
  
  def test_addSomeStudent(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(1328, 1020)
      element = self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732260336373").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) small")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) small")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) small")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) small").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Max Manager manager@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Sam Student student@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Sam Student student@moodle.a']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732260336054_295").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".icon-size-4:nth-child(5)")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r2_c1\"]/a/span").text == "AU"
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "SS"
      return True
    except Exception as e:
      return False
    
  def test_addSomeStudentWithMoreField(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(915, 1025)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "form_autocomplete_downarrow-1732262884994").click()
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) > span > span:nth-child(2)").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Max Manager manager@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Sam Student student@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      dropdown = self.driver.find_element(By.ID, "id_userlist")
      dropdown.find_element(By.XPATH, "//option[. = 'Admin User demo@moodle.a']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732262884802_292").click()
      self.driver.find_element(By.ID, "id_roletoassign").click()
      dropdown = self.driver.find_element(By.ID, "id_roletoassign")
      dropdown.find_element(By.XPATH, "//option[. = 'Non-editing teacher']").click()
      self.driver.find_element(By.ID, "id_timeend_enabled").click()
      self.driver.find_element(By.ID, "id_timeend_month").click()
      dropdown = self.driver.find_element(By.ID, "id_timeend_month")
      dropdown.find_element(By.XPATH, "//option[. = 'December']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732262884802_412").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".c5 > a")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r2_c1\"]/a/span").text == "AU"
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "SS"
      return True
    except Exception as e:
      return False
  
  def test_addZeroNotStudent(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(1328, 1020)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "id_roletoassign").click()
      dropdown = self.driver.find_element(By.ID, "id_roletoassign")
      dropdown.find_element(By.XPATH, "//option[. = 'Non-editing teacher']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732248764892_231").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "TT"
      return True
    except Exception as e:
      return False
    
  def test_addZeroStudent(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(1328, 1020)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      element = self.driver.find_element(By.ID, "yui_3_18_1_1_1732260571290_219")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.ID, "yui_3_18_1_1_1732260571290_219")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.ID, "yui_3_18_1_1_1732260571290_219")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732260571290_219").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "TT"
      return True
    except Exception as e:
      return False
    
  def test_addZeroStudentCancel(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(695, 1025)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732263576118_218").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "TT"
      return True
    except Exception as e:
      return False
    
  def test_addZeroStudentCurrCancel(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      element = self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732264643150_224").click()
      self.driver.find_element(By.ID, "id_timeend_enabled").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732264643150_244").click()
      self.driver.set_window_size(695, 1025)
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "TT"
      return True
    except Exception as e:
      return False
  
  def test_addZeroStudentFutuCancel(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(925, 1025)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732264828625_223").click()
      self.driver.find_element(By.ID, "id_timeend_enabled").click()
      self.driver.find_element(By.ID, "id_timeend_year").click()
      dropdown = self.driver.find_element(By.ID, "id_timeend_year")
      dropdown.find_element(By.XPATH, "//option[. = '2025']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732264828625_339").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".drawer-left-toggle > .btn")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element, 0, 0).perform()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "TT"
      return True
    except Exception as e:
      return False
  
  def test_addZeroStudentPassCancel(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732264199457_224").click()
      self.driver.find_element(By.ID, "id_timeend_enabled").click()
      self.driver.find_element(By.ID, "id_timeend_month").click()
      dropdown = self.driver.find_element(By.ID, "id_timeend_month")
      dropdown.find_element(By.XPATH, "//option[. = 'March']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732264199457_341").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".drawer-left-toggle > .btn")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "TT"
      return True
    except Exception as e:
      return False
  
  def test_addZeroStudentWithMoreField(self):
    try:
      self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
      self.driver.set_window_size(1328, 1020)
      self.driver.find_element(By.CSS_SELECTOR, "#enrolusersbutton-1 .btn").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732251386385_221").click()
      self.driver.find_element(By.ID, "id_recovergrades").click()
      self.driver.find_element(By.ID, "id_startdate").click()
      self.driver.find_element(By.ID, "id_timeend_enabled").click()
      self.driver.find_element(By.ID, "id_timeend_day").click()
      dropdown = self.driver.find_element(By.ID, "id_timeend_day")
      dropdown.find_element(By.XPATH, "//option[. = '29']").click()
      self.driver.find_element(By.ID, "yui_3_18_1_1_1732251386385_350").click()
      assert self.driver.find_element(By.XPATH, "//*[@id=\"user-index-participants-3_r0_c1\"]/a/span").text == "TT"
      return True
    except Exception as e:
      return False
    
  def run(self):
    self.setup_method(None)

    test_list = [
      self.test_addMoreStudentCancel,
      self.test_addOneNotStudent,
      self.test_addOneStudent,
      self.test_addOneStudentCancel,
      self.test_addOneStudentWithMoreField,
      self.test_addSomeNotStudent,
      self.test_addSomeStudent,
      self.test_addSomeStudentWithMoreField,
      self.test_addZeroNotStudent,
      self.test_addZeroStudent,
      self.test_addZeroStudentCancel,
      self.test_addZeroStudentCurrCancel,
      self.test_addZeroStudentFutuCancel,
      self.test_addZeroStudentPassCancel,
      self.test_addZeroStudentWithMoreField
    ]

    results = [test() for test in test_list]

    fail_test_names = []
    for i in range(0, len(results)):
      if not results[i]:
        fail_test_names.append(test_list[i].__name__)

    fail_test_str = ("FAILED:\n\t" + "\n\t".join(name for name in fail_test_names) + "\n") if len(fail_test_names) > 0 else ""
    print(f"\n-- Test Find Course (Level 0) --\nPASSED: {results.count(True)}/{len(results)}\n{fail_test_str}")
    
    self.teardown_method(None)

TestEnrollUsers().run()
    
  
  
  
  
  
  
  
  
  
    
  
      
  
