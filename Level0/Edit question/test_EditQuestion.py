# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.ui import Select
class TestEditQuestion():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.driver.set_window_size(800, 800)
    self.driver.get('https://school.moodledemo.net/login/index.php')    
    self.driver.find_element(By.ID, "username").send_keys('teacher')
    self.driver.find_element(By.ID, "password").send_keys('moodle2024')
    self.driver.find_element(By.ID, "loginbtn").click()

  def teardown_method(self, method):
    time.sleep(2)
    self.driver.find_element(By.ID, "user-menu-toggle").click()
    self.driver.find_element(By.LINK_TEXT, "Log out").click()
    self.driver.quit()

  
  def test_tC008001(self):
    try:
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      self.driver.find_element(By.XPATH, "//div[2]/a/span/span").click()
      time.sleep(2)
      self.driver.find_element(By.ID, "id_name").clear()
      self.driver.find_element(By.ID, "id_name").send_keys("abc")
      
      wait = WebDriverWait(self.driver, 20)
      iframes = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='id_questiontext']")))
      iframes.clear()
      iframes.send_keys("abc")  
      self.driver.switch_to.default_content()      
      self.driver.find_element(By.ID, "id_submitbutton").click()
      time.sleep(2)              
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id=\"mod-indent-outer-slot-741\"]/div[2]/a/span/span[1]")))
      assert report_name.text == "abc"
      return True
    
    except Exception as e:
        print("error: ", e)
        return False

  def test_tC008002(self):
    try:
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      
      # self.driver.find_element(By.XPATH, "//span[3]/span/span[2]/a").click()     
      time.sleep(2)      
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//span[3]/span/span[1]")))
      
      assert report_name.text == "1.00"
      return True
    
    except Exception as e:
        print("error: ", e)
        return False

  def test_tC008003(self):
    try: 
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      time.sleep(2) 
      self.driver.find_element(By.XPATH, "//span[3]/a[2]/i").click()     
      time.sleep(2)   
      self.driver.find_element(By.CSS_SELECTOR, ".modal-footer > .btn-primary").click()     
      time.sleep(2)  
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@class='mod_quiz-edit-top-controls']//span[1]")))
      
      assert report_name.text == "Questions: 18"
      return True    
    except Exception as e:
      print("error: ", e)
      self.driver.get("https://school.moodledemo.net/my/courses.php")
      return False

  def test_tC008004(self):
    try: 
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      
      self.driver.find_element(By.ID, "inputmaxgrade").clear()     
      self.driver.find_element(By.ID, "inputmaxgrade").send_keys(50,Keys.ENTER)    
      time.sleep(2)      
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='inputmaxgrade']")))
      
      assert report_name.get_attribute('value') == "50.00"
      return True    
    except Exception as e:
      print("error: ", e)
      self.driver.get("https://school.moodledemo.net/my/courses.php")
      return False
    
  def test_tC008005(self):
    try: 
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      time.sleep(2) 
      self.driver.find_element(By.XPATH, "//li[2]/div/span/i").click()     
      self.driver.find_element(By.LINK_TEXT, "After Page 9").click()     
      
           
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='page-8']/h4")))
      
      assert report_name.text == "Page 8"
      return True    
    except Exception as e:
      print("error: ", e)
      self.driver.get("https://school.moodledemo.net/my/courses.php")
      return False
    
  def test_tC008006(self):
    try: 
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      time.sleep(2) 
      self.driver.find_element(By.ID, "selectmultiplecommand").click()     
      self.driver.find_element(By.ID, "selectquestion-1").click()     
      self.driver.find_element(By.ID, "selectquestion-2").click()     
      self.driver.find_element(By.ID, "selectquestion-3").click()     
      self.driver.find_element(By.ID, "selectmultipledeletecommand").click()     
      time.sleep(2) 
      self.driver.find_element(By.CSS_SELECTOR, ".modal-footer > .btn-primary").click()    
      time.sleep(2) 
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@class='mod_quiz-edit-top-controls']//span[1]")))
      
      assert report_name.text == "Questions: 15"
      return True    
    except Exception as e:
      print("error: ", e)
      self.driver.get("https://school.moodledemo.net/my/courses.php")
      return False
    
  def test_tC008007(self):
    try: 
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      time.sleep(2) 
      self.driver.find_element(By.XPATH, "//span[3]/a[2]/i").click()     
         
      time.sleep(2) 
      self.driver.find_element(By.CSS_SELECTOR, ".modal-footer > .btn-secondary").click()    
      time.sleep(2) 
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@class='mod_quiz-edit-top-controls']//span[1]")))
      
      assert report_name.text == "Questions: 15"
      return True    
    except Exception as e:
      print("error: ", e)
      self.driver.get("https://school.moodledemo.net/my/courses.php")
      return False
    
    
  def test_tC008008(self):
    try: 
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      time.sleep(2) 
      self.driver.find_element(By.XPATH, "//div[2]/a/span/span").click()     
      self.driver.find_element(By.ID, "id_addanswers").click()
      self.driver.find_element(By.ID, "id_answer_1").clear()
      self.driver.find_element(By.ID, "id_answer_1").send_keys("abc")
      time.sleep(1)
      self.driver.find_element(By.ID, "id_submitbutton").click()
      time.sleep(2)
      self.driver.find_element(By.XPATH, "//div[2]/a/span/span").click()
      time.sleep(2)
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='id_answer_1']")))
      assert report_name.get_attribute('value') == "abc"
      return True    
    except Exception as e:
      print("error: ", e)
      self.driver.get("https://school.moodledemo.net/my/courses.php")
      return False
    
  def test_tC008009(self):
    try: 
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      
      self.driver.find_element(By.ID, "inputmaxgrade").clear()     
      self.driver.find_element(By.ID, "inputmaxgrade").send_keys(-5,Keys.ENTER)    
      time.sleep(2)      
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='inputmaxgrade']")))
      
      assert report_name.get_attribute('value') == "50.00"
      return True    
    except Exception as e:
      print("error: ", e)
      self.driver.get("https://school.moodledemo.net/my/courses.php")
      return False
    
  def test_tC008010(self):
    try: 
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      
      self.driver.find_element(By.ID, "inputmaxgrade").clear()     
      self.driver.find_element(By.ID, "inputmaxgrade").send_keys(90910,Keys.ENTER)    
      time.sleep(2)      
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//p[@class='errormessage']")))
      
      assert report_name.text == "Error writing to database"
      return True    
    except Exception as e:
      print("error: ", e)
      self.driver.get("https://school.moodledemo.net/my/courses.php")
      return False
    
  def test_tC008011(self):
    try:
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      self.driver.find_element(By.XPATH, "//div[2]/a/span/span").click()
      time.sleep(2)
      self.driver.find_element(By.ID, "id_name").clear()
      time.sleep(1)        
      self.driver.switch_to.default_content()      
      self.driver.find_element(By.ID, "id_submitbutton").click()
      
      time.sleep(2)              
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='id_error_name']")))
      assert report_name.text == "- You must supply a value here."
      return True
    except Exception as e:
        print("error: ", e)
        return False
  def test_tC008012(self):
    try:
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      self.driver.find_element(By.XPATH, "//div[2]/a/span/span").click()
      time.sleep(2)
      wait = WebDriverWait(self.driver, 20)
      iframes = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='id_questiontext']")))
      iframes.clear()
      time.sleep(2)        
      self.driver.switch_to.default_content()      
      self.driver.find_element(By.ID, "id_submitbutton").click()
      
      time.sleep(2)              
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='id_error_questiontext']")))
      assert report_name.text == "- You must supply a value here."
      return True
    except Exception as e:
        print("error: ", e)
        return False
      
  def test_tC008013(self):
    try:
      self.driver.get("https://school.moodledemo.net/mod/quiz/edit.php?cmid=672")
      self.driver.find_element(By.XPATH, "//div[2]/a/span/span").click()
      time.sleep(2)
      self.driver.find_element(By.ID, "id_answer_0").clear()
      time.sleep(2)        
      
      source_dropdown = self.driver.find_element(By.XPATH, "//select[@id='id_fraction_0']")
      source_dropdown.click()
      select = Select(source_dropdown)
      select.select_by_visible_text("None")
      
      self.driver.switch_to.default_content()      
      self.driver.find_element(By.ID, "id_submitbutton").click()
      
      time.sleep(2)              
      wait = WebDriverWait(self.driver, 20)
      report_name = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='fgroup_id_error_answeroptions_0']")))
      assert report_name.text == "One of the answers should have a score of 100% so it is possible to get full marks for this question."
      return True
    except Exception as e:
        print("error: ", e)
        return False
  

  def run(self):
    self.setup_method(None)

    test_list = [
      self.test_tC008001,
      self.test_tC008002,
      self.test_tC008003,
      self.test_tC008004,
      self.test_tC008005,
      self.test_tC008006,
      self.test_tC008007,
      self.test_tC008008,
      self.test_tC008009,
      self.test_tC008010,
      self.test_tC008011,
      self.test_tC008012,
      self.test_tC008013
    ]

    results = [test() for test in test_list]

    fail_test_names = []
    for i in range(0, len(results)):
      if not results[i]:
        fail_test_names.append(test_list[i].__name__)

    fail_test_str = ("FAILED:\n\t" + "\n\t".join(name for name in fail_test_names) + "\n") if len(fail_test_names) > 0 else ""
    print(f"\n-- Test Edit Question (Level 0) --\nPASSED: {results.count(True)}/{len(results)}\n{fail_test_str}")
    
    self.teardown_method(None)

TestEditQuestion().run()
