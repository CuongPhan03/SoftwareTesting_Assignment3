# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import os
INPUT_PATH = os.path.join(os.path.dirname(__file__), "Input_calendar_url_test.json")
def get_authen_info():
  with open(INPUT_PATH, 'r') as f:
    combined_data = json.load(f)
  # Lấy dữ liệu authen
  authen_data = combined_data.get('authen', [])  # Dùng get để tránh lỗi nếu key không tồn tại
  return authen_data
def get_test_data():
  with open(INPUT_PATH, 'r') as f:
    combined_data = json.load(f)
  test_url_data = combined_data.get('url_data', [])
  # Lấy dữ liệu test
  return [(d["name"], d["url"], d["expected"]) for d in test_url_data]
class TestTC001001():
  def setup_method(self, method):
    options = webdriver.ChromeOptions()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument("--inprivate")
    self.driver = webdriver.Chrome(options=options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def precondition(self):
    authen_data = get_authen_info()
    self.driver.delete_all_cookies()
    # Mở trang đăng nhập
    self.driver.get("https://sandbox.moodledemo.net/calendar/import.php?")
    
    # Nhập thông tin đăng nhập
    username = authen_data[0].get('username')  # Thay bằng tài khoản thật
    password = authen_data[0].get('password')  # Thay bằng mật khẩu thật
    
    # Tìm trường nhập username/password và nút đăng nhập
    self.driver.find_element(By.ID, "username").send_keys(username)  # ID của trường username
    self.driver.find_element(By.ID, "password").send_keys(password)  # ID của trường password
    self.driver.find_element(By.ID, "loginbtn").click()  # ID của nút đăng nhập
  def log_out(self):
    self.driver.find_element(By.ID, "user-menu-toggle").click()
    self.driver.find_element(By.LINK_TEXT, "Log out").click()
    time.sleep(5)
  @pytest.mark.parametrize("name, url, expected", get_test_data())
  def test_url(self, name, url, expected):
    self.precondition()
    self.driver.set_window_size(1052, 849)
    self.driver.find_element(By.ID, "id_name").click()
    self.driver.find_element(By.ID, "id_name").send_keys(name)
    self.driver.find_element(By.ID, "id_url").click()
    self.driver.find_element(By.ID, "id_url").send_keys(url)
    self.driver.find_element(By.ID, "id_add").click()
    if (expected == "- Required"):
      assert self.driver.find_element(By.XPATH, "//*[@id=\"id_error_name\"]").text == expected
    elif (expected == "Either a URL or a file is required to import a calendar."):
      assert self.driver.find_element(By.XPATH, "//*[@id=\"id_error_url\"]").text == expected
    elif (expected == "The given iCal URL is invalid."):
      assert self.driver.find_element(By.XPATH, "//*[@id=\"id_error_url\"]").text == expected
    else:
      assert self.driver.find_element(By.XPATH, "//*[@id=\"region-main\"]/div/h2").text == expected
    self.log_out()
  
  
