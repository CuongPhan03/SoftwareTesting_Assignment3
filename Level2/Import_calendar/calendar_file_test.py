# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import os
import sys
from selenium.webdriver.support import expected_conditions as EC
# Thêm thư mục cha vào sys.path để import

parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(parent_dir)
from prepare_for_test import TestAutomationHelper
INPUT_PATH = os.path.join(os.path.dirname(__file__), "Input_calendar_file_test.json")
PREPARED_CONFIG_PATH = os.path.join(os.path.dirname(__file__), '..', "prepare_for_test.json")
INPUT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), '..', "Config.json")
def get_authen_info():
  with open(INPUT_PATH, 'r') as f:
    combined_data = json.load(f)
  # Lấy dữ liệu authen
  authen_data = combined_data.get('authen', [])  # Dùng get để tránh lỗi nếu key không tồn tại
  return authen_data
def get_test_data():
  
  with open(INPUT_PATH, 'r') as f:
    combined_data = json.load(f)
  test_data = combined_data.get('file_data', [])
  if (len(test_data) == 0): print("Nothing")
  # Lấy dữ liệu test
  return [(d["name"], d["file"], d["expected"]) for d in test_data]
class TestTC001012():
  def setup_method(self, method):
    options = webdriver.ChromeOptions()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument("--inprivate")
    self.driver = webdriver.Chrome(options=options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def precondition(self):
    helper = TestAutomationHelper(self.driver)
    helper.execute_action("login", PREPARED_CONFIG_PATH)
    helper.execute_action("go_to_import_calendar_page", PREPARED_CONFIG_PATH)    
  def log_out(self):
    helper = TestAutomationHelper(self.driver)
    helper.execute_action("logout", PREPARED_CONFIG_PATH)
    
  def load_config(self, test_name):
    """Load configuration data for a specific test."""
    with open(INPUT_CONFIG_PATH, 'r') as f:
        data = json.load(f)
    for test_case in data:
        if test_case["test_name"] == test_name:
            return test_case
    raise ValueError(f"Test name '{test_name}' not found in configuration file.")
  def execute_steps(self, name=None, file=None, expected=None):
        steps = self.load_config("carlendar_file_test").get("steps", [])
        verify = self.load_config("carlendar_file_test").get("verify", [])
        pre_step = None
        i = -1;
        for step in steps:
          i = i + 1
          print(i)
          if ( i >= 4 and i <= 8 and file == ""): continue
          #print(step)
          method = step['method']
          value = step['value']
          action = step['action']
          data = step['data']
          print(data, value)
          # Determine the Selenium locator
          locator = getattr(By, method)
          # Execute action based on the action type
          if action == "click":
            element = WebDriverWait(self.driver, 15).until(
              EC.element_to_be_clickable((locator, value))
            )
            element.click()
          elif action == "find":
            upload_button = WebDriverWait(self.driver, 15).until(
              EC.element_to_be_clickable((locator, value))
            )
            time.sleep(3)
          elif action == "choose":
            pre_method = pre_step['method']
            pre_value = pre_step['value']  
            pre_locator = getattr(By, pre_method)
            dropdown = self.driver.find_element(pre_locator, pre_value)
            dropdown.find_element(locator, value).click()
          elif action == "send_keys":
            time.sleep(10)
            element = self.driver.find_element(locator, value)
            if data == "name":
              element.send_keys(name)
            elif data == "file":
              print(file)
              element.send_keys(file) 
          file_name = os.path.basename(file)
          if ( i == 8 and expected == "Text file filetype cannot be accepted."):
            for verify in verify:
              if verify.get("expected") == expected:
                WebDriverWait(self.driver, 15).until(
                  EC.visibility_of_element_located((By.XPATH, verify.get("xpath")))
                )
                assert True
                self.log_out()
                return
          elif (i == 8) and expected == f"The file '{file_name}' is either empty or a folder. To upload folders zip them first.":
            for verify in verify:
              if verify.get("expected") == "The file is either empty or a folder. To upload folders zip them first.":
                WebDriverWait(self.driver, 15).until(
                  EC.visibility_of_element_located((By.XPATH, verify.get("xpath") + f"\"{expected}\")]"))
                )
                assert True
                self.log_out()
                return
          pre_step = step

  @pytest.mark.parametrize("name, file, expected", get_test_data())
  def test_calendar_file(self, name, file, expected):
    self.precondition()
    self.execute_steps(name, file, expected)
    file_name = os.path.basename(file)
    if (expected != "Text file filetype cannot be accepted." and expected != f"The file '{file_name}' is either empty or a folder. To upload folders zip them first."):
      verify = self.load_config("carlendar_file_test").get("verify", [])
      for verify in verify:
        if verify.get("expected") == expected:
          WebDriverWait(self.driver, 5).until(
            EC.visibility_of_element_located((By.XPATH, verify.get("xpath")))
          )
          assert True
      self.log_out()
        
  
