# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import os
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import sys

# Thêm thư mục cha vào sys.path để import
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(parent_dir)

# Import từ prepare_for_test.py
from prepare_for_test import TestAutomationHelper
INPUT_DATA_PATH = os.path.join(os.path.dirname(__file__), "add_a_TF_question_data.json")
INPUT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), '..', 'Config.json')
PREPARED_CONFIG_PATH = os.path.join(os.path.dirname(__file__), '..', "prepare_for_test.json")
def get_authen_info():
  with open(INPUT_DATA_PATH, 'r') as f:
    combined_data = json.load(f)
  # Lấy dữ liệu authen
  authen_data = combined_data.get('authen', [])  # Dùng get để tránh lỗi nếu key không tồn tại
  return authen_data
def get_test_data():
  with open(INPUT_DATA_PATH, 'r') as f:
    combined_data = json.load(f)
  test_data = combined_data.get('data', [])
  # Lấy dữ liệu test
  return [(d["name"], d["text"], d["default_mark"], d["expected"]) for d in test_data]
class TestTC002001():
  
  def setup_method(self, method):
    options = webdriver.ChromeOptions()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument("--inprivate")
    self.driver = webdriver.Chrome(options=options)
    self.vars = {}
    
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def precondition(self):
    helper = TestAutomationHelper(self.driver)
    helper.execute_action("login", PREPARED_CONFIG_PATH)
    helper.execute_action("go_to_add_question_page", PREPARED_CONFIG_PATH)
    # authen_data = get_authen_info()
    # self.driver.delete_all_cookies()
    # # Mở trang đăng nhập
    # self.driver.get("https://sandbox.moodledemo.net/question/edit.php?courseid=1")
    # time.sleep(1)
    # # Nhập thông tin đăng nhập
    # username = authen_data[0].get('username')  # Thay bằng tài khoản thật
    # password = authen_data[0].get('password')  # Thay bằng mật khẩu thật
    
    # # Tìm trường nhập username/password và nút đăng nhập
    # self.driver.find_element(By.ID, "username").send_keys(username)  # ID của trường username
    # self.driver.find_element(By.ID, "password").send_keys(password)  # ID của trường password
    
    # self.driver.find_element(By.ID, "loginbtn").click()  # ID của nút đăng nhập
    
    # #self.driver.get("https://sandbox.moodledemo.net/question/edit.php?courseid=1")
    # time.sleep(3)
    # self.driver.find_element(By.XPATH, "/html/body/div[2]/div[3]/div/div[3]/div/section/div/div[2]/div[2]/div/div/div[1]/form/button").click()
    # self.driver.find_element(By.ID, "item_qtype_truefalse").click()
    # time.sleep(1)
    # self.driver.find_element(By.XPATH, "/html/body/div[6]/div[3]/div/div[2]/div/div/form/div[3]/input[1]").click()
  def log_out(self):
    # self.driver.find_element(By.ID, "user-menu-toggle").click()
    # self.driver.find_element(By.LINK_TEXT, "Log out").click()
    # time.sleep(5)
    helper = TestAutomationHelper(self.driver)
    helper.execute_action("logout", PREPARED_CONFIG_PATH)
    
  
  def load_step(self, file_path):
    with open(file_path, 'r') as f:
      data = json.load(f)
    for a in data:
      if (a.get("test_name") == "add_a_TF_question"):
        return a
  def execute_steps(self, name=None, text=None, default_mark=None):
    steps = self.load_step(INPUT_CONFIG_PATH).get("steps", [])
    for step in steps:
      #print(step)
      method = step['method']
      value = step['value']
      action = step['action']
      data = step['data']

       # Determine the Selenium locator
      locator = getattr(By, method)

      # Execute action based on the action type
      if action == "click":
        element = self.driver.find_element(locator, value)
        element.click()

      elif action == "send_keys":
        element = self.driver.find_element(locator, value)
        if data == "name":
          element.send_keys(name)
        elif data == "text":
          # Use JavaScript to handle editable fields
          time.sleep(5)
          self.driver.execute_script("""
          if(arguments[0].contentEditable === 'true') {
              arguments[0].innerText = arguments[1];
          }""", element, text)
          self.driver.switch_to.default_content()
        elif data == "default_mark":
          element.send_keys(default_mark)

      elif action == "clear":
        element = self.driver.find_element(locator, value)
        element.clear()

      elif action == "switch_to_frame":
        frames = None
        frame_index = int(data) if data.isdigit() else 0
        #i = 0
        while (frames == None or len(frames) == 0):
          #print(i)
          #i = i + 1
          frames = self.driver.find_elements(locator, value)
          if (len(frames) != 0): 
            if (frames[frame_index]): self.driver.switch_to.frame(frames[frame_index])  # Chuyển đến frame đầu tiên
          time.sleep(1)

      elif action == "switch_to_default_content":
        self.driver.switch_to.default_content()  

  
  
  def verify_error_message(self, config_path, name="", text="", default_mark="", expected = ""):
    test_case = self.load_step(config_path)
    if not test_case:
      raise Exception("No test case data loaded")

    # Find the matching verify step based on the expected value
    matching_verify = None
    for verify in test_case.get("verify", []):
      if verify.get("expected") == expected:
        matching_verify = verify
        break

    if not matching_verify:
      raise Exception(f"No matching verify step found for expected: {expected}")

    # Extract condition, xpath, and expected from the matching verify step
    condition = matching_verify.get("condition")
    xpath = matching_verify.get("xpath")
    
        # Kiểm tra phần tử
    try:
        element = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.XPATH, xpath))
        )
        element_text = element.text
    except Exception as e:
        raise Exception(f"Error locating element at XPath '{xpath}': {str(e)}")

    # Thực hiện kiểm tra điều kiện dựa vào expected
    if expected == "Reset columns":
        assert element_text == expected, f"Expected '{expected}' at XPath '{xpath}', but got '{element_text}'"

    elif expected == "- You must supply a value here.":
        if condition == "name" and name == "":
            assert element_text == expected, f"Expected '{expected}' at XPath '{xpath}', but got '{element_text}'"
        if condition == "text" and text == "":
            assert element_text == expected, f"Expected '{expected}' at XPath '{xpath}', but got '{element_text}'"
        if condition == "default_mark" and default_mark == "":
            assert element_text == expected, f"Expected '{expected}' at XPath '{xpath}', but got '{element_text}'"

    elif expected == "The default mark must be positive.":
        assert element_text == expected, f"Expected '{expected}' at XPath '{xpath}', but got '{element_text}'"

    elif expected == "You must enter a number here.":
        assert element_text == expected, f"Expected '{expected}' at XPath '{xpath}', but got '{element_text}'"
        
  @pytest.mark.parametrize("name, text, default_mark, expected", get_test_data())
  def test_tC002001(self, name, text, default_mark, expected):
    self.precondition()
    self.execute_steps(name, text, default_mark)
    self.verify_error_message(INPUT_CONFIG_PATH, name, text, default_mark, expected)
    self.log_out()