# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestFindCourse():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.data = [
      { "name": "My first course", "description": "This is a blank course, ready for you to start adding students, content and activities." },
      { "name": "My second course", "description": "This is a blank course, ready for you to start adding students, content and activities." }
    ]
    self.driver.set_window_size(800, 800)
    self.driver.get('https://sandbox.moodledemo.net/login/index.php')    
    self.driver.find_element(By.ID, "username").send_keys('teacher')
    self.driver.find_element(By.ID, "password").send_keys('sandbox24')
    self.driver.find_element(By.ID, "loginbtn").click()
  
  def teardown_method(self, method):
    self.driver.find_element(By.ID, "user-menu-toggle").click()
    self.driver.find_element(By.LINK_TEXT, "Log out").click()
    self.driver.quit()


  def test(self, searchText):
    try:
      self.driver.get("https://sandbox.moodledemo.net/my/courses.php")
      self.driver.find_element(By.NAME, "search").click()
      self.driver.find_element(By.NAME, "search").send_keys(searchText if searchText else "")
      self.driver.find_element(By.NAME, "search").send_keys(Keys.ENTER)
      text = searchText.lower().strip() if searchText else ""
      data = [ 
        { "name": self.data[0]["name"].lower(), "description": self.data[0]["description"].lower() },
        { "name": self.data[1]["name"].lower(), "description": self.data[1]["description"].lower() },
      ]
      time.sleep(3)
      wait = WebDriverWait(self.driver, 20)
      if (text in data[0]["name"] or text in data[0]["description"]) and (text in data[1]["name"] or text in data[1]["description"]):
        course1 = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@data-region='card-deck']/div[1]/div/div/div/div/a/span[3]/span[1]")))
        course2 = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@data-region='card-deck']/div[2]/div/div/div/div/a/span[3]/span[1]")))
        assert course1.text == "My first course"
        assert course2.text == "My second course"
        courseCount = len(self.driver.find_elements(By.CSS_SELECTOR, ".coursename"))
        assert(courseCount == 2)
      elif (text in data[0]["name"] or text in data[0]["description"]) or (text in data[1]["name"] or text in data[1]["description"]):
        if text in data[0]["name"] or text in data[0]["description"]:
          course1 = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@data-region='card-deck']/div[1]/div/div/div/div/a/span[3]/span[1]")))
          assert course1.text == "My first course"
        else: 
          course2 = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@data-region='card-deck']/div[2]/div/div/div/div/a/span[3]/span[1]")))
          assert course2.text == "My second course"
        courseCount = len(self.driver.find_elements(By.CSS_SELECTOR, ".coursename"))
        assert(courseCount == 1)
      else:
        message = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@data-region='paged-content-page']/div/p")))
        assert message.text == "No courses"
      return True
    except Exception:
      return False

  def run(self, filename):
    self.setup_method(None)
    with open(filename, encoding="UTF-8") as f:
      testcases = json.load(f)

    results = [self.test(testcase["searchText"]) for testcase in testcases]

    fail_test_names = []
    for i in range(0, len(results)):
      if not results[i]:
        fail_test_names.append(testcases[i]["name"])
        
    fail_test_str = ("FAILED:\n\t"+ "\n\t".join(name for name in fail_test_names) + "\n") if len(fail_test_names) > 0 else ""
    print(f"\n-- Test Find Course (Level 1) --\nPASSED: {results.count(True)}/{len(results)}\n{fail_test_str}")

    self.teardown_method(None)

  
TestFindCourse().run('./input_FindCourse.json')
