# Generated by Selenium IDE
import pytest
import time
import json
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

JS_DROP_FILES = "var k=arguments,d=k[0],g=k[1],c=k[2],m=d.ownerDocument||document;for(var e=0;;){var f=d.getBoundingClientRect(),b=f.left+(g||(f.width/2)),a=f.top+(c||(f.height/2)),h=m.elementFromPoint(b,a);if(h&&d.contains(h)){break}if(++e>1){var j=new Error('Element not interactable');j.code=15;throw j}d.scrollIntoView({behavior:'instant',block:'center',inline:'center'})}var l=m.createElement('INPUT');l.setAttribute('type','file');l.setAttribute('multiple','');l.setAttribute('style','position:fixed;z-index:2147483647;left:0;top:0;');l.onchange=function(q){l.parentElement.removeChild(l);q.stopPropagation();var r={constructor:DataTransfer,effectAllowed:'all',dropEffect:'none',types:['Files'],files:l.files,setData:function u(){},getData:function o(){},clearData:function s(){},setDragImage:function i(){}};if(window.DataTransferItemList){r.items=Object.setPrototypeOf(Array.prototype.map.call(l.files,function(x){return{constructor:DataTransferItem,kind:'file',type:x.type,getAsFile:function v(){return x},getAsString:function y(A){var z=new FileReader();z.onload=function(B){A(B.target.result)};z.readAsText(x)},webkitGetAsEntry:function w(){return{constructor:FileSystemFileEntry,name:x.name,fullPath:'/'+x.name,isFile:true,isDirectory:false,file:function z(A){A(x)}}}}}),{constructor:DataTransferItemList,add:function t(){},clear:function p(){},remove:function n(){}})}['dragenter','dragover','drop'].forEach(function(v){var w=m.createEvent('DragEvent');w.initMouseEvent(v,true,true,m.defaultView,0,0,0,b,a,false,false,false,false,0,null);Object.setPrototypeOf(w,null);w.dataTransfer=r;Object.setPrototypeOf(w,DragEvent.prototype);h.dispatchEvent(w)})};m.documentElement.appendChild(l);l.getBoundingClientRect();return l"

def drop_files(element, files, offsetX=0, offsetY=0, wait=3):
  driver = element.parent
  isLocal = not driver._is_remote or '127.0.0.1' in driver.command_executor._url
  paths = []
  
  # ensure files are present, and upload to the remote server if session is remote
  for file in (files if isinstance(files, list) else [files]) :
    if not os.path.isfile(file) :
      raise FileNotFoundError(file)
    paths.append(file if isLocal else element._upload(file))
  
  value = '\n'.join(paths)
  elm_input = driver.execute_script(JS_DROP_FILES, element, offsetX, offsetY)
  elm_input._execute('sendKeysToElement', {'value': [value], 'text': value})

WebElement.drop_files = drop_files

class TestPostToForum():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.driver.set_window_size(1000, 800)  
    self.driver.get('https://sandbox.moodledemo.net/login/index.php')  
    self.driver.find_element(By.ID, "username").send_keys('teacher')
    self.driver.find_element(By.ID, "password").send_keys('sandbox24')
    self.driver.find_element(By.ID, "loginbtn").click()
  
  def teardown_method(self, method):
    self.driver.find_element(By.ID, "user-menu-toggle").click()
    self.driver.find_element(By.LINK_TEXT, "Log out").click()
    self.driver.quit()


  def test(self, data):
    try:
      self.driver.get("https://sandbox.moodledemo.net/mod/forum/view.php?id=1")
      self.driver.find_element(By.LINK_TEXT, "Add discussion topic").click()
      
      wait = WebDriverWait(self.driver, 20)
      
      if data["subject"]:
        self.driver.find_element(By.ID, "id_subject").send_keys(data["subject"])

      wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "iframe")))
      if data["message"]:
        self.driver.switch_to.frame(0)
        tinymce = self.driver.find_element(By.ID, "tinymce")
        tinymce.send_keys(data["message"])
        self.driver.switch_to.default_content()

      if "files" in data or "pinned" in data or "notification" in data or "tags" in data:
        advanced_btn = wait.until(EC.element_to_be_clickable((By.ID, "id_advancedadddiscussion")))
        advanced_btn.click()
        if ("files" in data and data["files"]):
          paths = []
          large_file = False
          for filename in data["files"]:
            path = os.path.abspath(os.path.join(os.path.dirname(__file__), filename))
            paths.append(path)
            if os.stat(path).st_size > 256*1024*1024:
              large_file = True
          drop_target = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".dndupload-arrow")))
          drop_target.drop_files(paths)

          if large_file or len(data["files"]) > 1:
            error = self.driver.find_element(By.ID, "fp-msg-labelledby")
            if large_file: 
              assert "The maximum size you can upload is 256MB." in error.text
            else:
              assert error.text == "You are allowed to attach a maximum of 1 file(s) to this item"
            self.driver.find_element(By.CSS_SELECTOR, ".fp-msg-butok").click()
            return True
          wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".fp-file")))
        if "pinned" in data and data["pinned"]:
          self.driver.find_element(By.ID, "id_pinned").click()
        if "notification" in data and data["notification"]:
          self.driver.find_element(By.ID, "id_mailnow").click()
        if "tags" in data and data["tags"]:
          input_tags = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Enter tags...']")))
          for tag in data["tags"]:
            input_tags.send_keys(tag)
            input_tags.send_keys(Keys.ENTER)

      if data["submit"]:
        self.driver.find_element(By.ID, "id_submitbutton").click()
        if not data["subject"] or (data["subject"] and len(data["subject"]) > 255):
          error = self.driver.find_element(By.ID, "id_error_subject")
          assert error.text == ("- Maximum of 255 characters" if data["subject"] else "- Required")
          return True
        if not data["message"]:
          error = self.driver.find_element(By.ID, "id_error_message")
          assert error.text == "- Required"
          return True
        info = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='user-notifications']/div/p[1]")))
        if "notification" in data and data["notification"]:
          assert info.text == "This post will be mailed out immediately to all forum subscribers." 
        else:
          assert info.text == "Your post was successfully added."
      else:
        self.driver.find_element(By.ID, "id_cancelbtn").click()
        elements = self.driver.find_elements(By.XPATH, "//*[@id='user-notifications']/div")
        assert len(elements) == 0

      return True
    except Exception:
      return False
  
  def run(self, filename):
    self.setup_method(None)
    with open(filename, encoding="UTF-8") as f:
      testcases = json.load(f)

    results = [self.test(testcase["data"]) for testcase in testcases]

    fail_test_names = []
    for i in range(0, len(results)):
      if not results[i]:
        fail_test_names.append(testcases[i]["name"]) 
        
    fail_test_str = ("FAILED:\n\t"+ "\n\t".join(name for name in fail_test_names) + "\n") if len(fail_test_names) > 0 else ""
    print(f"\n-- Test Find Course (Level 1) --\nPASSED: {results.count(True)}/{len(results)}\n{fail_test_str}")

    self.teardown_method(None)

TestPostToForum().run('./input_PostToForum.json')
